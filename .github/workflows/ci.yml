name: Continuous Integration

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["main", "0.1.x", "0.2.x"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0
  CARGO_HTTP_MULTIPLEXING: false

jobs:
  build:
    name: Build and Test
    runs-on: macos-latest
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt

      - name: Setup Rust nightly for formatting
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Workaround for curl network errors
        if: ${{ matrix.rust == '1.70.0' || matrix.rust == '1.71.0' }}
        run: echo 'CARGO_HTTP_MULTIPLEXING=false' >> $GITHUB_ENV

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Format check
        run: cargo +nightly fmt -- --check

      - name: Clippy
        run: |
          echo '
          # Specify which lints are allowed/denied
          disallowed-methods = [
              # Example: Disallow certain methods that might be problematic
              { path = "std::option::Option::unwrap", reason = "prefer `?` or explicit handling" },
              { path = "std::result::Result::unwrap", reason = "prefer `?` or explicit handling" },
          ]

          # Configure specific lints
          too-many-arguments-threshold = 6
          type-complexity-threshold    = 250
          enum-variant-size-threshold  = 200

          # Note: We can't use path-specific ignores this way
          # Instead, use #[allow(missing_docs)] in the relevant test files
          ' > clippy.toml
          cargo clippy --workspace --all-targets --all-features -- -D warnings -A non_snake_case

      - name: Build with retry
        run: |
          for i in {1..3}; do cargo build --all-features && break || sleep 10; done

      - name: Run tests with retry
        run: |
          for i in {1..3}; do cargo test --all-features && break || sleep 10; done

  coverage:
    name: Code Coverage
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false

  docs:
    name: Check Documentation
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Check documentation
        env:
          RUSTDOCFLAGS: "-D warnings"
        run: cargo doc --no-deps --all-features

  publish-dry-run:
    name: Publish Dry Run
    runs-on: macos-latest
    # Only run on specific branches where publishing might occur
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/0.1.x' || github.ref == 'refs/heads/0.2.x'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Clean up .DS_Store files
        run: |
          find . -name ".DS_Store" -type f -delete
          find ./target -name ".DS_Store" -type f -delete 2>/dev/null || true

      - name: Dry run publish
        run: cargo publish --dry-run --no-verify --allow-dirty
