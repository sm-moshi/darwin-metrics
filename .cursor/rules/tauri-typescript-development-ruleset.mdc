---
description: Rust + TypeScript/JavaScrpt ruleset for Tauri  + TailwindCSS cross platform development.
globs: *.ts, *.css, *.js
alwaysApply: false
---
# Cross-Platform Desktop Development Ruleset

## üöÄ Core Development Principles

### Architectural Foundation
- Prioritize clear, maintainable, and scalable architecture
- Separate concerns between Rust (backend/performance) and TypeScript (frontend/interactions)
- Ensure seamless integration across platforms (Windows, macOS, Linux)

## ü¶Ä Rust Development Guidelines

### Performance and Safety
- Leverage Rust's ownership model for memory safety
- Use `Result` and `Option` for robust error handling
- Implement zero-cost abstractions
- Utilize `#[derive()]` for automatic trait implementations
- Prefer immutability by default
- Use `clippy` for static code analysis

### Tauri Backend Practices
- Create thin, efficient Rust command bridges
- Implement secure IPC (Inter-Process Communication)
- Use `serde` for serialization/deserialization
- Minimize unsafe code blocks
- Implement comprehensive error handling
- Use type-driven design for API boundaries

### Concurrency and Async Handling
- Leverage `tokio` for async runtime
- Use `async/await` for non-blocking operations
- Implement structured concurrency
- Use channels for safe inter-thread communication

## üåê TypeScript Frontend Guidelines

### Type Safety and Architecture
- Strict TypeScript configuration
  - Enable `strict: true` in `tsconfig.json`
  - Use explicit type annotations
  - Leverage advanced type system features
- Implement comprehensive type guards
- Use discriminated unions for state management
- Minimize `any` type usage

### Next.js Best Practices
- Utilize Server Side Rendering (SSR) and Static Site Generation (SSG)
- Implement efficient data fetching strategies
- Use dynamic imports for code splitting
- Optimize performance with Next.js built-in optimizations

### State Management
- Prefer React Context or lightweight state management
- Use immutable state updates
- Implement clear state transition logic
- Consider Zustand or Jotai for complex state needs

## üé® Styling and UI Guidelines

### TailwindCSS Implementation
- Utility-first approach
- Use @apply for complex, reusable styles
- Create custom design tokens
- Implement responsive design patterns
- Minimize custom CSS, maximize Tailwind utilities

### ShadCN-UI Integration
- Use component-driven architecture
- Customize components for consistent design language
- Implement accessible, reusable UI components
- Follow design system principles

## üîí Security Considerations

### Cross-Platform Security
- Implement robust input validation
- Use Tauri's built-in security features
- Sanitize all user inputs
- Implement proper authentication and authorization
- Use environment variable management
- Protect against common web vulnerabilities

### Secure Communication
- Implement secure IPC protocols
- Use encrypted communication channels
- Validate and sanitize data at API boundaries
- Implement proper error handling without exposing sensitive information

## üß™ Testing Strategy

### Comprehensive Testing Approach
- 100% test coverage for critical paths
- Unit tests for Rust backend
- Integration tests for Tauri commands
- React component testing with React Testing Library
- End-to-end testing with Playwright
- Performance and security testing

### Testing Tools
- Rust: `cargo test`, `nextest`
- TypeScript: Jest, React Testing Library
- E2E: Playwright
- Coverage: `cargo tarpaulin`, Istanbul

## üîÑ Development Workflow

### Version Control
- Conventional commits
- Semantic versioning
- Comprehensive changelog
- Branch protection rules
- Pull request templates

### Continuous Integration
- GitHub Actions for CI/CD
- Automated testing
- Cross-platform build verification
- Automated dependency updates
- Security scanning

## üöß Performance Optimization

### Cross-Platform Optimization
- Minimize IPC overhead
- Use Rust for computationally intensive tasks
- Implement lazy loading
- Optimize asset bundling
- Use webassembly for complex computations

## üì¶ Dependency Management

### Dependency Guidelines
- Minimize external dependencies
- Regularly update dependencies
- Use `cargo-audit` for vulnerability scanning
- Pin dependency versions
- Prefer maintained, well-documented libraries

## üåü Continuous Improvement

### Knowledge and Skill Development
- Stay updated with Tauri, Rust, and TypeScript ecosystems
- Regular code reviews
- Knowledge sharing sessions
- Performance and security workshops

**Note**: These guidelines are living documents. Continuous refinement is expected and encouraged.
